<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.jh</groupId>
        <artifactId>cavy-backend</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>cavy-boot</artifactId>
    <packaging>jar</packaging>
    <dependencies>
        <dependency>
            <groupId>com.jh</groupId>
            <artifactId>cavy-manage</artifactId>
            <version>${modle.version}</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>com.jh</groupId>-->
<!--            <artifactId>cavy-task</artifactId>-->
<!--            <version>${modle.version}</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>com.jh</groupId>
            <artifactId>cavy-starter-file</artifactId>
            <version>${modle.version}</version>
        </dependency>

        <dependency>
            <groupId>com.jh</groupId>
            <artifactId>cavy-starter-limiter</artifactId>
            <version>${modle.version}</version>
        </dependency>
        <dependency>
            <groupId>com.jh</groupId>
            <artifactId>cavy-starter-jwt</artifactId>
            <version>${modle.version}</version>
        </dependency>
        <dependency>
            <groupId>com.jh</groupId>
            <artifactId>cavy-starter-message</artifactId>
            <version>${modle.version}</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>


    <build>
        <finalName>cavy-boot</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.3.7.RELEASE</version>
                <configuration>
                    <mainClass>com.jh.cavy.boot.CavyBootApplication</mainClass>
                    <!--解决windows命令行窗口中文乱码-->
                    <jvmArguments>-Dfile.encoding=UTF-8</jvmArguments>
                    <layout>ZIP</layout>
                    <!--配置需要打包进项目的jar-->
                    <includes>
                        <!--这里是填写需要包含进去的jar，
                        	必须项目中的某些模块，会经常变动，那么就应该将其坐标写进来
                        	如果没有则non-exists ，表示不打包依赖
                        -->
<!--                        <include>-->
<!--                            <groupId>non-exists</groupId>-->
<!--                            <artifactId>non-exists</artifactId>-->
<!--                        </include>-->
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 此插件用于将依赖包抽出-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-dependency-plugin</artifactId>-->
<!--                <version>3.1.1</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>copy-dependencies</id>-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>copy-dependencies</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
<!--                            &lt;!&ndash;是否排除传递性&ndash;&gt;-->
<!--                            <excludeTransitive>false</excludeTransitive>-->
<!--                            &lt;!&ndash;是否去掉 jar 包版本信息&ndash;&gt;-->
<!--                            <stripVersion>false</stripVersion>-->
<!--                            &lt;!&ndash;包含范围&ndash;&gt;-->
<!--                            <includeScope>runtime</includeScope>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
            <plugin>
                <!-- Build an executable JAR -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>com.jh.cavy.boot.CavyBootApplication</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.shared</groupId>
                        <artifactId>maven-filtering</artifactId>
                        <version>1.3</version>
                    </dependency>
                </dependencies>
<!--                <configuration>-->
<!--                    <outputDirectory>../</outputDirectory>-->
<!--                </configuration>-->
            </plugin>


            <!-- Docker maven plugin -->
            <!--            <plugin>-->
            <!--                <groupId>com.spotify</groupId>-->
            <!--                <artifactId>docker-maven-plugin</artifactId>-->
            <!--                <version>1.1.1</version>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>build-image</id>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>build</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--                <configuration>-->
            <!--                    &lt;!&ndash; 镜像名称 &ndash;&gt;-->
            <!--                    <imageName>${project.artifactId}</imageName>-->
            <!--                    &lt;!&ndash; 指定标签 &ndash;&gt;-->
            <!--                    <imageTags>-->
            <!--                        <imageTag>latest</imageTag>-->
            <!--                    </imageTags>-->
            <!--                    &lt;!&ndash; 基础镜像&ndash;&gt;-->
            <!--                    <baseImage>openjdk:8-jdk-alpine</baseImage>-->

            <!--                    &lt;!&ndash; 切换到容器工作目录&ndash;&gt;-->
            <!--                    <workdir>/ROOT</workdir>-->

            <!--                    <entryPoint>["java","-jar","${project.build.finalName}.jar"]</entryPoint>-->

            <!--                    &lt;!&ndash; 指定远程 Docker API地址  &ndash;&gt;-->
            <!--                    <dockerHost>http://localhost:2375</dockerHost>-->

            <!--                    &lt;!&ndash; 复制 jar包到docker容器指定目录&ndash;&gt;-->
            <!--                    <resources>-->
            <!--                        <resource>-->
            <!--                            <targetPath>/ROOT</targetPath>-->
            <!--                            &lt;!&ndash; 用于指定需要复制的根目录，${project.build.directory}表示target目录 &ndash;&gt;-->
            <!--                            <directory>${project.build.directory}</directory>-->
            <!--                            &lt;!&ndash; 用于指定需要复制的文件，${project.build.finalName}.jar就是打包后的target目录下的jar包名称　&ndash;&gt;-->
            <!--                            <include>${project.build.finalName}.jar</include>-->
            <!--                        </resource>-->
            <!--                    </resources>-->
            <!--                </configuration>-->
            <!--            </plugin>-->
            <!-- Docker maven plugin -->
<!--            executions.execution.phase:此处配置了在maven打包应用时构建docker镜像；-->
<!--            imageName：用于指定镜像名称，mall-tiny是仓库名称，${project.artifactId}为镜像名称，${project.version}为仓库名称；-->
<!--            dockerHost：打包后上传到的docker服务器地址；-->
<!--            baseImage：该应用所依赖的基础镜像，此处为java；-->
<!--            entryPoint：docker容器启动时执行的命令；-->
<!--            resources.resource.targetPath：将打包后的资源文件复制到该目录；-->
<!--            resources.resource.directory：需要复制的文件所在目录，maven打包的应用jar包保存在target目录下面；-->
<!--            resources.resource.include：需要复制的文件，打包好的应用jar包。-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.1.1</version>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <imageName>cavy-backend/${project.artifactId}:${project.version}</imageName>
                    <dockerHost>http://192.168.2.11:2375</dockerHost>
                    <baseImage>openjdk:8-jre</baseImage>
                    <entryPoint>["java", "-jar","/${project.build.finalName}.jar"]
                    </entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>


        </plugins>
    </build>
</project>
